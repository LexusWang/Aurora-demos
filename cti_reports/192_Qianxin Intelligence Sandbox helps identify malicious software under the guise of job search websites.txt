Overview
Malware often uses various disguises to hide its true malicious behavior in order to attract victims to run the program and avoid raising suspicion from abnormal activities. Sandboxes provide a controlled environment to run such suspicious software and identify potential malicious operations hidden beneath the disguise. Additionally, the runtime behavior within the sandbox can serve as guidance for professional analysts to conduct deeper analysis.

Recently, Qi An Xin Threat Intelligence Center discovered a suspicious compressed package during routine operations. Open-source intelligence also identified that this package originated from a website with the domain cdn.careers2find[.]com [1]. The homepage of this website describes itself as a job search site.

To quickly determine whether the captured compressed package contains malicious behavior, it was first uploaded to the Qi An Xin Intelligence Sandbox (https://sandbox.ti.qianxin.com/sandbox/page) for analysis.

Sandbox Analysis
Basic sample information is as follows:

Qi An Xin Intelligence Sandbox Report Link: https://sandbox.ti.qianxin.com/sandbox/page/detail?type=file&id=AZMJ5Lm1SZq0HOVfdN9Z
Sample Filename: SignedConnection.zip
Sample MD5: bb4c8f42cc624c628e4b98bd43f29fa6
Sample Type: ZIP Archive
Sample Size: 1,022,011 bytes

After upload and analysis completion, basic sample information is displayed, including file size, type, and hash. The Qi An Xin Intelligence Sandbox, based on intelligent malicious behavior comprehensive assessment, has identified the file as suspicious and assigned a malicious score of 10. The RAS detection includes a “Maybe_Sideloading” tag, indicating the sample may use DLL sideloading techniques. This sample has been run in multiple sandbox environments; different environment reports can be viewed on the right side by switching analysis environments.

Below the basic sample information is the summary of the sandbox analysis results provided by the Threat Intelligence AI Assistant for user reference.

The AV Engines section shows detection results from dozens of antivirus engines, with multiple engines identifying the sample as malicious.

Behavioral Anomalies summarize suspicious behaviors of the sample. Entries with a downward arrow on the right can be expanded for detailed information.

Notable suspicious behaviors include writing registry autostart entries named to mimic OneDrive, pointing to the path “C:\Users\admin\AppData\Local\Microsoft\WindowsInsights\workstation\FileCoAuth.exe”.

The sample executes HTTP requests to access links hosted on Github.

It queries the public IP via api.ipify.org.

It accesses Google Drive.

It creates executable files, one of which is located at the same path as the registry autostart entry mentioned above.

The Deep Analysis section lists the file names contained in the ZIP archive. Some filenames correspond to executable files mentioned in the behavioral anomalies, indicating files from the archive may be copied to other directories.

Host Behavior process information shows that after running SignedConnection.exe from the archive, it launches the file “C:\Users\admin\AppData\Local\Microsoft\WindowsInsights\workstation\FileCoAuth.exe”.

Clicking on SignedConnection.exe reveals further operations by the process, including creating the directory “C:\Users\admin\AppData\Local\Microsoft\WindowsInsights\workstation”, writing EXE and DLL files into it, and setting registry autostart entries.

Network Behavior shows that besides accessing api.ipify.org, Github, and Google Drive, the sample also visits a suspicious domain xboxapicenter.com.

Combined with Host Behavior information, these domain accesses all originate from the launched FileCoAuth.exe process.

In the Run Screenshots section, the sample displays a user interface connecting to the server domain quiz.careers2find[.]com, the same domain as the compressed package’s download website.

Based on information provided by the Qi An Xin Intelligence Sandbox, we have a preliminary understanding of this ZIP archive sample: it contains EXE and DLL files, may execute malicious code via DLL sideloading; after running SignedConnection.exe, it creates a directory and writes EXE and DLL files (with file names identical to those in the archive, suggesting file copying), establishes persistence through registry autostart entries pointing to the new directory’s EXE FileCoAuth.exe, then launches this EXE; FileCoAuth.exe accesses a series of domains; additionally, the sample creates a UI, possibly as a disguise to cover the malicious activities above.

Detailed Analysis
Compressed Package
The compressed package download link is “hxxps://cdn.careers2find.com/assets/app/SignedConnection.zip”. On the download page, the right button downloads the ZIP archive, while the left button opens a PDF containing installation and usage instructions for the package.

Except for Qt5Core.dll and secur32.dll, all PE files in the archive are digitally signed. The modification dates of these two files are recent.

The SignedConnection.exe in the archive is actually the OneDrive-related program FileCoAuth.exe.

SignedConnection.exe runs secur32.dll from the same directory via DLL sideloading.

Secur32.dll
secur32.dll is written in C# and mainly functions to create a user interface to deceive victims, move the backdoor DLL, and establish persistence.

Filename: secur32.dll
MD5: 3528837b4088a22f0043551431809b3d
File size: 342.50 KB (350,720 bytes)

Overview:
The DLL’s DllMain function creates a thread to execute the OnAPIENTRY function. OnAPIENTRY further runs two threads: MainThread and UIThread. MainThread performs the malicious operations, while UIThread creates a user interface for disguise.

MainThread
The operations of MainThread are implemented within StateValidation.Instantion. The execution flow is as follows:

Check if the directory %LocalAppData%\Microsoft\WindowsInsights\workstation exists. If it does, call system APIs like CreateToolhelp32Snapshot, Process32FirstW, Process32NextW to find any running FileCoAuth.exe processes. If found, terminate these processes and delete the directory.

Recreate the directory %LocalAppData%\Microsoft\WindowsInsights\workstation.

Use StateValidation.CPR to copy files: the backdoor DLL and other dependent DLLs are copied into the directory. Specifically, LoggingPlatform.dll, msvcp140.dll, UpdateRingSettings.dll, and vcruntime140.dll are copied as is; SignedConnection.exe is copied and renamed to FileCoAuth.exe in the new directory; Qt5Core.dll is copied and renamed to secur32.dll. The original secur32.dll is not copied.

Use StateValidation.Subscriber to establish persistence by adding a registry autostart entry under HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run with the name "OneDrive " (note the trailing space to avoid conflict with the genuine OneDrive). The entry points to the new directory’s FileCoAuth.exe.

Call xLnCh to run FileCoAuth.exe in the new directory using ShellExecuteExW.

UIThread
UIThread creates a user interface derived from MicroftSignConnection.MainForm, which mimics a login program to deceive victims.

Qt5Core.dll (renamed to secur32.dll)
Original Qt5Core.dll inside the archive is the actual backdoor DLL with functions for information gathering and fetching follow-up malware. After copying, it is renamed to secur32.dll. When FileCoAuth.exe starts, it side-loads this DLL.

File info:

Filename: Qt5Core.dll / secur32.dll

MD5: f9914c7d6e09d227b2cecea50b87e58b

Size: 163.50 KB (167,424 bytes)

Behavior:

Checks if the file telementry.cab exists in the same directory; this file stores the victim ID. If not present, generates a GUID and writes it into this file.

Verifies internet connectivity by connecting to https://www.microsoft.com.

Then sequentially attempts GET requests to the following URLs to obtain the actual C2 server address:

https://raw.githubusercontent.com/msdnedgesupport/msdn/main/README.md (no longer accessible)

https://drive.google.com/uc?export=download&id=1prtuA0jGP3TvjJyR_o-10tF29Mpamrc2 (downloads a readme.txt)

https://xboxapicenter.com/

The readme.txt from Google Drive contains strings separated by #. These numbers are converted from ASCII codes into characters, revealing the C2 domain name: xboxapicenter.com.

C2 Communication
The backdoor connects to the C2 server at port 443 and sends POST requests with custom X-Forwarded-For and UserAgent headers.

X-Forwarded-For contains the victim’s public IP, obtained via api.ipify.org.

UserAgent includes the C2 request type, victim ID, and related parameters separated by slashes /.

C2 Request Types and UserAgent Format
Request Type	UserAgent Format	Description
Get backdoor command	15/<victim_id>//1/	Two parameters indicate sleep type and payload status; POST with no body data
Send device info	12/<victim_id>/	Related to command 1; POST with XOR encrypted data payload
Send process list	13/<victim_id>/	Related to command 7; POST with XOR encrypted data payload
Get follow-up payload data	9/<victim_id>/	Related to command 2; POST with no body, parameter is payload offset

Data sent to C2 is XOR encrypted with a randomly generated key (1–100), then HEX encoded.

C2 Backdoor Commands
Command	Description
1	Collect and send device info (OS version, admin rights, hostname, username)
2	Download follow-up payload: check if running, terminate if yes; download from C2; unzip to log\cabinet.zip in backdoor directory
4	Start follow-up payload: check if log directory exists, run contained FileCoAuth.exe
5	Terminate follow-up payload-related processes
6	Switch backdoor sleep interval (options: 3s or 30s)
7	Collect and send current running process info

Data Format
Device and process info are concatenated as JSON strings.

Device info JSON is disguised by including Microsoft domain strings.

Traceability and Attribution
The malicious archive SignedConnection.zip exhibits attack techniques and code characteristics consistent with those documented in Google’s February 2024 report on the Middle East-based threat group UNC1549 [2].

In previous campaigns, UNC1549 used job recruitment lures and the same “FileCoAuth.exe + secur32.dll” DLL sideloading combination. Additionally, the behaviors of bringthemhomenow.zip, as noted in that report, are highly consistent with those observed in the recently captured archive.

Sandbox Correlation – bringthemhomenow.zip
Sandbox Report: QiAnXin Threat Intelligence Sandbox Report
Sample Filename: bringthemhomenow.zip
MD5: ef262f571cd429d88f629789616365e4
Type: ZIP archive
Size: 8,979,790 bytes

Similar behavioral traits include:

Persistence via Registry, with startup entry names mimicking OneDrive.

File copying into a newly created directory, followed by execution of FileCoAuth.exe.

Plain HTTP communication with the C2 server, allowing full visibility of POST request contents.

Identical UserAgent construction format used in C2 communication.

MINIBUS Backdoor Identification
Upon further analysis, the Qt5Core.dll file within SignedConnection.zip is identified as the MINIBUS backdoor previously named CoreUIComponent.dll (MD5: 816af741c3d6be1397d306841d12e206).
The backdoor commands are entirely consistent with those seen before, with notable enhancements in the new variant:

C2 server address is now fetched dynamically from remote resources.

Traffic disguise by testing connectivity through Microsoft domains.

Infrastructure Note
The domain careers2find[.]com, linked to the delivery campaign, was recently registered, and both its domain and certificate details suggest it was purpose-built as a phishing site by the attackers.

Conclusion
The observed use of fake job-related content to lure victims into downloading and running a connection tool—ultimately executing UNC1549’s MINIBUS backdoor—is a continuation of prior UNC1549 operations.

Security Advisory
Over recent years, job-themed phishing attacks have become increasingly prevalent. UNC1549 stands out by leveraging fake job sites to lure users into executing disguised programs, which are in fact backdoors granting attackers persistent access.

QiAnXin Threat Intelligence Center urges users to stay vigilant against phishing attacks:

Do not open links from unknown sources, especially those shared via social media.

Avoid executing email attachments or files with exaggerated titles from untrusted origins.

Refrain from installing software not sourced from official app stores or trusted websites.

Regularly back up important data, and apply security patches in a timely manner.

For suspicious applications, users can utilize the QiAnXin Threat Intelligence Sandbox (https://sandbox.ti.qianxin.com/sandbox/page), which supports in-depth analysis for Windows, Android, and other platforms.

QiAnXin’s full product suite—including the Threat Intelligence Platform (TIP), Tianqing, Tianyan APT Detection System, NGSOC, and Situational Awareness Platform—has been updated to precisely detect this type of attack.