01
Organization Background
The GoldenEyeDog group, also known as Watchdog, GoldenEyeDog, Dragon Breath, APT-Q-27, was originally an APT group mainly targeting Southeast Asian gambling and scam organizations. In recent two years, it has expanded its attack scope to target financial institutions, internet companies, and universities. This group often uses watering hole and phishing websites disguised as official websites of legitimate software, hosting installation packages embedded with malicious code to implant trojans into users’ hosts for attacks.

02
Overview
During threat hunting and analysis, Yuran Lab discovered new variant attack methods by GoldenEyeDog. The group newly developed malware disguised as installation packages of FlyVPN and AnyDesk. These two malicious installation packages used new attack techniques to achieve stronger evasion capabilities and avoid security researchers’ sample hunting, mainly reflected as follows:
The FlyVPN disguised malicious installation package uses new attack methods:
For the first time, RC4 algorithm is used to encrypt the malicious DLL, achieving evasion.
Uses dual white plus black (white exe, black dll) process loading to execute final malicious code, evading sample hunting.
Uses an unknown packer to protect the trojan, slowing down security researchers’ analysis.
Creates and starts system services via MSI instructions to execute malicious code, realizing a more covert attack.
The AnyDesk disguised malicious installation package uses new attack methods:
For the first time discovered, uses the winos backdoor generated by the Dount tool for malicious attacks.
Upgrades attack chain, enhances stealth, and achieves persistence via dual startup entries.
These two samples used multiple novel hiding and anti-detection techniques never seen in previous GoldenEyeDog samples. Their behavior of forging legitimate software installation packages, malicious installation package C2 addresses, and the usage of the winos backdoor in the attack chain overlap with GoldenEyeDog’s historical attack behaviors. Therefore, Yuran Lab attributes these two attack behaviors to the GoldenEyeDog group.

03
GoldenEyeDog Attack Technique Evolution
No Protection Period: Early stage of GoldenEyeDog, malicious samples used luring file names to trick victims into clicking and executing. For example, "xxLottery.cmd", "xxData.exe".
Simple Hiding Period: GoldenEyeDog performed simple hiding of malicious code. For example, the Telegram installation package delivered in 2020 embedded malicious code into NSIS installation scripts and used white plus black hiding. Some samples hid malicious code into the registry, only loading it dynamically at runtime. For example, in 2022, GoldenEyeDog used Aspack for simple packing.
Combination of Multiple Hiding Methods Period: After 2024, GoldenEyeDog samples adopted more complex and sophisticated hiding. For example, the forged KuaiLian VPN installation package used three progressive ways to hide malicious code:
Embedded password-protected compressed packages into PE files, so even if security software detects the compressed package, it cannot analyze whether it contains malicious code.
The malicious code in the compressed package is split into two files, which are only combined dynamically at runtime to load and execute. Each file statically appears "harmless".
The last-stage malicious code is encrypted and compressed into an LP.txt file, effectively resisting security defenses.

Sample One:
Analysis of the PlugX Attack Chain of the FlyVPN Disguised Sample
The sample starts from a watering hole site MSI installation package. After the target installs the disguised FlyVPN package, a malicious system service is created. The system service executable is a white file with a legitimate digital signature, but its dependent DLL is a carefully crafted malicious DLL. When executed, it creates a new process and uses white plus black method to load the final shellcode. The shellcode is a modified packed PlugX trojan. The entire process is as follows.

01
Watering Hole Site Download Lure
The watering hole site https://www[.]flyvpn[.]org/, the homepage is the download address and its layout is basically the same as the original FlyVPN official site. Clicking the download button gets a zip package, which after extraction contains an MSI file.
The MSI file timestamp is May 2024, disguised as a FlyVPN installer. The MSI contains many files, among which the largest FlyVPN.exe is a legitimate installer. It also contains other exe and dll files.
Among them, AcroRd32.exe is a white file from Adobe Reader; AcroRd32.dll, despite the dll suffix, is not a PE file but gibberish. The MSI also contains several dat data files, which are encrypted payloads and will be analyzed in detail later.

02
Installing System Service for Persistence
The MSI file adds a system service, running wwstsvc.exe.
wwstsvc.exe is a white file signed by a domestic company, and depends on WWStartupCtrl64.dll.
After installation, wwstsvc.exe starts immediately.

03
Decrypting and Launching the Second Stage Code
The first stage malicious code is in WWStartupCtrl64.dll, which uses the RC4 encryption algorithm with a fixed key.
The fixed key string is as follows.
WWStartupCtrl64.dll decrypts dragon.dat into dragon.dll, which is the second stage malicious code. Other gibberish files bound in the MSI can also be decrypted into legitimate PE files with the fixed key, such as AcroRd32.dll, log1.dat, log2.dat, main.dat. The decryption script is as follows:
from Crypto.Cipher import ARC4
import sys
key = b'4as4df64q6fa1sdfa31'
assert(len(key) == 19)
cipher = ARC4.new(key)
content = open(sys.argv[1], 'rb').read()
msg = cipher.decrypt(content)
open(f"{sys.argv[1]}.decrypt", "wb").write(msg)
After decryption, WWStartupCtrl64.dll launches UpLoader.exe, which is also a white file with a legitimate signature. UpLoader.exe depends on dragon.dll.
Dragon.dll is a black file crafted by GoldenEyeDog, whose malicious code entry is ChromeMain_0.
First, it obtains the exe directory path in a subfunction.
Then appends the string "main.dat".

04
Decrypting and Executing the RAT
After decryption, the malware calls VirtualAlloc to allocate memory with read, write, and execute permissions, then copies the decrypted content into the newly allocated space and begins execution from the PE file’s start.
Analyzing the unpacked PE file shows it is packed with an unknown protector. Compared to normal PE files, it adds a very large text0 section containing many short assembly snippets followed by long arrays of random numbers. These code snippets cannot form a full function. This resembles characteristics of PECompact and ASProtect packers, but tools like PEID cannot identify the specific packer.
Since the packer is unknown, unpacking for further analysis is impossible. From string analysis, the malware strongly resembles PlugX malware. For example, strings like “bootProc” and “PIPE\RUN_AS_USER(%d)” are PlugX indicators. It is judged that GoldenEyeDog used leaked PlugX source code modified as a new RAT.
The C2 address can be found in the data segment.

Sample Two:
Analysis of the Donut Attack Chain in the AnyDesk Disguised Sample
Another sample captured by the lab (disguised AnyDesk installer) uses the Donut loader to load shellcode. This sample is an AnyDesk installer package carrying malicious code but also with normal software functionality. During installation, the malicious module executes; besides the AnyDesk installer, it releases and launches a white+black program and attack payload that ultimately connects to C2. GoldenEyeDog demonstrates continuous evolution to avoid antivirus detection.
Analysis shows the final payload uses the Donut-loaded winos remote control tool. The attack chain is basically the same as the FlyVPN-disguised sample, with two differences:
The AnyDesk sample uses startup entries for persistence, while the FlyVPN sample uses system services.
The AnyDesk sample uses the Donut-generated winos backdoor trojan, while the FlyVPN sample uses the modified packed PlugX trojan.

01
Installing the Disguised AnyDesk and Releasing Malicious Payload
The attack starts from a watering hole website with domain any[.]goprlhw[.]top, which GoldenEyeDog has specially SEO optimized for easy discovery by target victims.
The MSI installer calls the whoss export function of Anuxhs.dll.
The whoss function decompresses all.apk and executes down.exe.

Malware places malicious payloads in "%HOME%/random-UUID" directory, mainly including:
a) down.exe: main program
b) steam_api64.dll: malicious DLL to load shellcode
c) aut.png: malicious shellcode for persistence
d) view.png: malicious shellcode, Donut-generated winos trojan

02
Persistence and Payload Injection Attack
steam_api64.dll first checks if the command line contains the /aut parameter; if not, it creates a child process with that parameter. The child process loads shellcode to achieve persistence, which is detailed later.
Then it checks if certain antivirus software is installed. If installed, it reads shellcode from view.png and overwrites the entry point of down.exe to execute the shellcode directly.
If no antivirus is detected, it creates a process colorcpl.exe.
It then reads the shellcode from view.png and injects it into colorcpl.exe via APC (Asynchronous Procedure Call) to execute.
If the command line contains the /aut parameter (the child process mentioned before), it reads shellcode from aut.png, follows a similar process to overwrite the main executable’s entry point, and executes the shellcode.
Analysis of the PE file unpacked from aut.png shows PDB (debug) information is still retained.
The main purpose of shellcode in aut.png is persistence. It first creates a shortcut down.lnk pointing to down.exe.
Then creates two startup entries at system boot: one points directly to down.exe, the other points to the shortcut, both named GoogleUpdata_Service to mislead victims.

03
Loading Donut-generated Shellcode
Shellcode in view.png is generated by Donut. The original payload is an exe file compressed with the aplib algorithm and encrypted with the chaskey algorithm using a random key.
After decrypting and decompressing with a script, the shellcode is written to a file donut_dec, which is a valid exe file.

04
Attack Payload: winos Tool
Reverse engineering donut_dec reveals the built-in C2 configuration format matches that of the winos remote control trojan based on adapted Gh0st source code.
The Gh0st trojan uses stream cipher encryption to obfuscate communications with its C2.
The winos trojan is full-featured, containing an online module and functional modules. The online module maintains the backdoor, receives commands, and loads/executes modules. Functional modules include registry search, service management, screen capture, keylogging, file management, etc.

04
Attribution and Summary
GoldenEyeDog has frequently used common software disguises to bundle malicious code in past attacks, e.g., disguising as Telegram, KuaiLian VPN, and deploying these on watering hole sites to lure users via SEO optimization.
The newly captured FlyVPN and AnyDesk disguised samples also originate from watering hole sites, with significant overlap in tactics and techniques with GoldenEyeDog’s history.
In terms of C2 infrastructure, the FlyVPN sample’s C2 addresses correlate with servers previously used by GoldenEyeDog, further confirming attribution.
Regarding payloads, the Gh0st-related payload used in the AnyDesk attack chain is nearly present across all publicly disclosed recent attacks from the group.

In conclusion, there is strong reason to suspect these two newly discovered malware samples are deployed by the GoldenEyeDog group.