APT-C-28
ScreCruft
APT-C-28 (also known as ScarCruft), also referred to as APT37 (Reaper) and Group123, is an APT organization originating from the Northeast Asia region. The group’s malicious activities can be traced back as early as 2012 and have remained highly active to this day. APT-C-28 primarily focuses on conducting cyberattacks against South Korea and other Asian countries, targeting a wide range of critical industries including chemical, electronics, manufacturing, aerospace, automotive, and healthcare. The main objective of the group is to steal sensitive data and intelligence related to strategic military, political, and economic interests.
RokRat, a cloud-based remote access tool, has been a frequently used tool by APT-C-28 in many of its attack campaigns since 2016. The continued use of RokRat demonstrates its crucial role in enabling APT-C-28 to carry out complex data theft activities. Through this advanced RAT, APT-C-28 is able to effectively infiltrate target networks, steal key information, and conduct long-term monitoring of victims.
The 360 Advanced Threat Research Institute has been continuously monitoring APT-C-28 and successfully captured multiple threat activities conducted by the group targeting South Korean government and corporate personnel. The attackers distributed malicious LNK files and used fileless techniques to implant RokRat malware into the target systems.

1. Attack Process Analysis
The attackers first gathered information from legitimate official websites that may be of interest to the target users. Based on this, they crafted highly customized phishing emails and sent them to the targets. The attachments of these phishing emails contained compressed packages embedding malicious LNK files. Once the target user clicked and activated the malicious LNK file, it released multiple files, including an encrypted RokRat Shellcode. The attacker then used an XOR algorithm to decrypt the encrypted payload. Subsequently, the shellcode was loaded into a newly created thread, where it further decrypted hard-coded data and finally obtained and executed the RokRat malware.

2. Payload Delivery Analysis
The malicious LNK file invoked PowerShell to extract multiple files embedded within itself. These files included decoy documents, malicious BAT scripts, malicious PowerShell scripts, and encrypted RokRat shellcode.

We observed different types of lure documents targeting multiple organizations and individuals associated with North Korea.

Next, the malicious BAT script invoked another PowerShell script to decrypt and load the RokRat shellcode into memory for execution.

To assist security researchers in quickly understanding the components of RokRat, we provided code snippets used to parse the malicious LNK files and extract different stage modules of RokRat, as detailed in the appendix.


3. Attack Component Analysis
The decrypted shellcode decrypts a PE file from hard-coded encrypted data. The decrypted PE file is a RokRat trojan compiled in October 2024. Once RokRat is loaded into memory, control jumps to its entry point for execution.

Over the past few years, we have continuously disclosed various features and evolutions of RokRat [1][2][3]. The emergence of this sample provides an opportunity to conduct an in-depth analysis and comparison of the 2024 version of RokRat, furthering our understanding of its development path.
Overall analysis shows that the 2024 version of RokRat maintains consistency in core functionalities with previous versions, with major changes reflected in attack paths and strategies.

Here, we emphasize some key features for the reference of security experts and for developing targeted security rules.
For example, RokRat disguises its User-Agent as Googlebot in the request header, specifically:
User-Agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
Additionally, it uses a typical string in its communications:
"--wwjaughalvncjwiajs--"
Next, we summarize the various control commands used in RokRat malware and their corresponding functionalities to aid in better understanding and defense.
Table 1: Command Characters and Functions
Command Character	Function Description
0, g	Listening or waiting state
i,	Capture screenshot, periodically retrieve system process information
j, b	Quick termination
d	Execute command to delete specific files (e.g., startup items, batch files), then exit
f	Execute command to delete specific files, then exit
h	Traverse all logical drives on the system, retrieve all file information and upload
e	Execute command
c	Upload specified file
1,2,5,6	Retrieve next-stage payload from URL specified in the command
3,4,7,8,9	File download
1,2,3,4	Upon successful payload retrieval, create thread to execute payload and collect system info
5,6,7,8,9	Upon successful payload retrieval, decrypt payload and write to KB400928_doc.exe, then execute

Table 2: Comparison of Trace Cleaning Methods in Different RokRat Versions
RokRat (2024/2023/2020/2019)	RokRat (2022)
del "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\*.VBS" "%appdata%\*.CMD" "%appdata%\*.BAT" "%appdata%\*01" "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\*.lnk" "%allusersprofile%\Microsoft\Windows\Start Menu\Programs\Startup\*.lnk" /F /Q	reg delete HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v OfficeBootPower /f & reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v OfficeBootPower /f & del c:\\programdata\\30

Section II. Attribution Assessment
In this attack, the attackers deviated from their previous methodology by embedding the encrypted payload directly into the malicious LNK file, rather than delivering it via cloud services. This shift likely stems from the swift actions of major security vendors and service providers in disabling malicious cloud service links. The change reflects the attackers’ ongoing adjustments to counter evolving security measures. It also underscores the effective efforts by cybersecurity vendors and researchers in disrupting RokRat-related threats. Looking ahead, 360 Advanced Threat Research Institute will continue to closely monitor RokRat and its associated components to safeguard digital security.

Section III. Defense and Inspection Recommendations
To defend against and mitigate such attacks, we recommend the following measures:

Stay Vigilant: Be cautious with email attachments or links from unknown sources. Avoid clicking or downloading them without verification.

Security Awareness Training: Enhance employee training on identifying phishing emails and malicious files, and teach them how to handle suspicious messages properly.

Email Filtering and Scanning: Deploy robust email filtering systems to block phishing emails and malicious attachments. Regularly scan the email system for potential threats.

File Scanning and Antivirus Software: Install and update reliable antivirus software to automatically scan downloaded files and detect/block malware.

System and Application Patching: Keep operating systems, applications, and network devices up to date with the latest patches to fix known vulnerabilities.

Access Control: Restrict the execution of certain file types, such as LNK files, to prevent malicious file execution. Enforce strict access controls to limit attacker movement.

Data Backup and Recovery: Regularly back up important data and ensure quick recovery options in the event of a security incident.

Appendix - IOCs and Code
936888d84b33f152d39ec539f5ce71aa  
5adfa76b72236bf017f7968fd012e968  
3323777ca4ac2dc2c39f5c55c0c54e3c  
f3c087a0be0687afd78829cab2d3bc2b  
ee7e3e39dd951f352c669f64bd8ec1b5  
144928fc87e1d50f5ed162bb1651ab24  
0253b33cfb3deb6a1d4bb197895c4530  
89c0d2cc1e71b17449eec454161d60da  
Table 3. Code for Analyzing RokRat LNK Files

def parse_rokrat_lnk_file(lnk_path, out_path):
    # Attempt to parse the LNK file to get lnk_command
    try:
        with open(lnk_path, 'rb') as lnk_file_handle:
            lnk = LnkParse3.lnk_file(lnk_file_handle)
            lnk_command = lnk.lnk_command
    except Exception as e:
        print(f"Unable to read LNK file: {e}")
        return

    # Match specific command patterns
    pattern = re.compile(
        r'\$lnkFile\.Seek\((0x[0-9A-F]+),\s*\[System\.IO\.SeekOrigin\]::Begin\);'
        r'.*?New-Object byte\[\] (0x[0-9A-F]+);'
        r'.*?\$(\w+)Path',
        re.DOTALL | re.IGNORECASE
    )
    matches = pattern.findall(lnk_command)

    # Read LNK file content
    try:
        with open(lnk_path, 'rb') as lnk_handle:
            lnk_content = bytearray(lnk_handle.read())
    except Exception as e:
        print(f"Unable to read LNK file content: {e}")
        return

    exe_content = None
    key_match = []

    # Process matches and extract file content
    for match in matches:
        seek = int(match[0], 16)
        length = int(match[1], 16)
        filename = match[2]
        file_content = lnk_content[seek:seek + length]

        # Determine if it's executable content
        if len(str(len(file_content))) == 6:
            exe_content = file_content

        # Check for "bxor" in content
        if b"bxor" in file_content:
            try:
                key_pattern = re.compile(
                    r"\$\w+\s*=\s*['\"]([^'\"]+)['\"];\s*for\s*\([^)]*\)\s*\{[^=]+=[^-]+-bxor",
                    re.DOTALL | re.IGNORECASE
                )
                decoded_content = file_content.decode('utf-8', errors='ignore')
                key_match = key_pattern.findall(decoded_content)
            except Exception as e:
                print(f"Error processing file content: {e}")

        # Save extracted file
        try:
            os.makedirs(out_path, exist_ok=True)
            with open(os.path.join(out_path, filename), 'wb') as f:
                f.write(file_content)
            print(f"Extracted file: {filename}")
        except Exception as e:
            print(f"Error writing file: {e}")

    # Decrypt if executable content and key found
    if exe_content and key_match:
        decrypted_data = bytearray()
        key_char = key_match[0]
        try:
            for byte in exe_content:
                decrypted_data.append(byte ^ ord(key_char))
            with open(os.path.join(out_path, "rokrat_shellcode"), 'wb') as f:
                f.write(decrypted_data)
            print("Decrypted and saved RokRat Shellcode")

            try:
                offset = 0x58b
                if len(decrypted_data) >= offset + 5:
                    xor_key = decrypted_data[offset]
                    encrypted_length_bytes = decrypted_data[offset + 1:offset + 5]
                    encrypted_length = int.from_bytes(encrypted_length_bytes, byteorder='little')
                    encrypted_data = decrypted_data[offset + 5:offset + 5 + encrypted_length]
                    if len(encrypted_data) == encrypted_length:
                        final_decrypted_data = bytearray()
                        for byte in encrypted_data:
                            final_decrypted_data.append(byte ^ xor_key)
                        with open(os.path.join(out_path, "rokrat"), 'wb') as f:
                            f.write(final_decrypted_data)
                        print("Decrypted and saved RokRat")
                    else:
                        print("Mismatch in encrypted data length.")
                else:
                    print("Insufficient data to extract key and length.")
            except Exception as e:
                print(f"Error decrypting at offset 0x58b: {e}")
        except Exception as e:
            print(f"Error during decryption: {e}")
    else:
        print("No executable content or key found; skipping decryption.")