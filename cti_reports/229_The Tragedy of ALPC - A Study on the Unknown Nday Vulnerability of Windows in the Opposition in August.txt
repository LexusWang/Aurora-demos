Overview
This vulnerability sample was recently discovered by Qi An Xin Threat Intelligence Center during routine wild vulnerability monitoring operations. When first uploaded, it was detected by only 6 antivirus engines.

After analysis, it was confirmed that this vulnerability was fixed in Microsoft’s August patch. It is a fixed, previously unknown n-day exploit. The exact running effects are as described below.

Vulnerability Sample Analysis
First, let’s go through the entire sample. The sample starts by launching a cmd process, then calls the core function fun_vulstar.

fun_vulstar checks the current machine's related system version.

Next, it dynamically obtains addresses of some system API functions.

It creates a new thread to call the exploit function fun_expProc.

fun_expProc calls fun_IoRingandPipeinit.

This function checks whether the target system supports the I/O ring privilege escalation method. If supported, it completes the necessary initialization and returns var_ioringRegBuffers / var_ioringRegBuffersCount. The detailed exploitation mechanism can be referenced in the following article:
(https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/)

In short, this is an exploitation primitive unique to Windows 11 22H2+ that can turn arbitrary write or even arbitrary increment errors in the Windows kernel into full read/write capabilities of kernel memory. During the I/O ring exploitation, arbitrary address writes modify the _IORING_OBJECT fields: var_ioringRegBuffers and var_ioringRegBuffersCount, thus achieving global memory read/write.

Then, depending on whether the I/O ring privilege escalation is used, related initialization work is completed.

Taking the I/O ring method as an example: in this case, the exploit sprays the address 0x0 with length 0x2000 at var_ioringRegBuffers - 0x2c.

Fun_init allocates memory of length 0x10000 at address 0x1000000000 and obtains the WorkerFactory object address var_KWorkerHandleaddr returned by NtCreateWorkerFactory.

Next, a large loop begins where fun_NtAlpcConnectPort calls NtAlpcConnectPort to create an ALPC connection object. After creation, two threads are started to respectively call fun_NtRegisterThreadTerminatePort and fun_expWorker.

The function fun_NtAlpcConnectPort simply calls NtAlpcConnectPort to connect to the system’s pdc ALPC port service and returns the ALPC port handle.

As shown in the figure, after the two threads start, fun_setEvilmessage is called to set up a custom-constructed memory segment. Then WaitForSingleObject monitors whether thread 1 (fun_NtRegisterThreadTerminatePort) ends. If it ends, it enters the red box part in the figure, where the core is the function fun_NtCreateEvent.

fun_setEvilmessage constructs a piece of memory that varies based on the initially obtained system version.

The final effect is shown below: the constructed memory always starts at offset 66130. The tested system version constructs memory as shown in the red box. Regardless of version, the final position stores the previously obtained var_KWorkerHandleaddr plus an offset.

We can see that after fun_setEvilmessage completes, another memory segment starting at 7FF7F21671B0 is initialized. The memory constructed at 7FF7F2166130 inside fun_setEvilmessage is placed at 7FF7F21671B0 + 0x20 → 7FF7F21671D0.

The final memory structure at 7FF7F21671B0 is as shown.

The function fun_NtCreateEvent branches based on its third argument. If non-zero, it enters a loop calling NtQueryLicenseValue.

Otherwise, it enters the following branch where the core operation is to call NtCreateEvent. Notice that the second large red box also sets the address at 7FF7F21671B0 with contents consistent with the outer function. The address 7FF7F21671B0 is set as the ObjectAttributes.ObjectName parameter of NtCreateEvent.

Next, detailed roles of the two threads:

Thread one calls fun_NtRegisterThreadTerminatePort, which is simple: if the previous ALPC port handle var_alpcConnectionHandle was successfully created, it calls NtRegisterThreadTerminatePort.

NtRegisterThreadTerminatePort is an undocumented function, but some related information exists online. Simply put, this function associates an ALPC port handle with the current thread. When the thread exits, the kernel calls NtTerminateThread and sends an LPC_TERMINATION_MESSAGE to the corresponding ALPC server port.

In practice, this function calls ObReferenceObjectByHandle to obtain the kernel ALPC port object corresponding to the port handle, then allocates a 0x10-sized memory pool, storing the port object at offset 0x8 in this pool. It then cross-references this memory pool and the current thread’s _ETHREAD object.

Interestingly, NtRegisterThreadTerminatePort was used as a utility function in k0shl’s exploitation of CVE-2022-22715 (https://whereisk0shl.top/post/break-me-out-of-sandbox-in-old-pipe-cve-2022-22715-windows-dirty-pipe), to perform object sprays of length 0x20.

Then, the second thread calls fun_expWorker, which internally calls fun_loopNtSetInformationWorkerFactory based on a flag.

fun_loopNtSetInformationWorkerFactory first calls fun_setEvilmessage.

Then it calls NtAlpcSendWaitReceivePort. This function uses the previously obtained pdc port handle to send a message containing v6 to the pdc ALPC port service.

Interestingly, after NtAlpcSendWaitReceivePort returns, it seems the previous WorkerFactory has been modified. This allows calling NtSetInformationWorkerFactory on the WorkerFactory to perform arbitrary address writes.

The code uses two types of exploitation:

For I/O ring method, it modifies the key addresses var_ioringRegBuffers / var_ioringRegBuffersCount in the I/O ring primitive to gain global read/write ability. The third argument of NtSetInformationWorkerFactory is the write content; the target address is sprayed in the range 0x1000000000 to 0x1000002000. Thus, it can write arbitrary data to random addresses in this range.

The other escalation method modifies the PreviousMode value directly by arbitrary write. The PreviousMode address is also sprayed in the same memory range. After setting PreviousMode via NtSetInformationWorkerFactory, it uses NtReadVirtualMemory / NtWriteVirtualMemory to achieve global read/write.

The privilege escalation using PreviousMode modification is finally implemented in fun_eopCmdProcess via NtReadVirtualMemory / NtWriteVirtualMemory.

The I/O ring exploitation method in fun_tokenChangewithSystem uses the global read/write capability to directly replace the token of the cmd process with the system token to achieve privilege escalation.

I/O ring arbitrary address read.

I/O ring arbitrary address write.

Subsequently, the write capability is used to modify the malformed WorkerFactory object to facilitate a smooth Close operation. The modified positions are at WorkerFactory-0x28 and WorkerFactory-0x30.

Detailed Vulnerability Analysis
From the above sample analysis, we can basically conclude that after the call to NtAlpcSendWaitReceivePort, the corresponding kernel object at var_KWorkerHandleaddr should have been modified. This causes the use of var_KWorkerHandleaddr in the NtSetInformationWorkerFactory function to allow pointer content writes within the address range 0x100000000 - 0x1000002000. However, this is currently still a hypothesis (though from my years of intuition, I am quite certain). Therefore, we summarize several core issues:

Is the var_KWorkerHandleaddr inside NtSetInformationWorkerFactory modified, and why does this lead to pointer writes in the 0x100000000 - 0x1000002000 range?

If var_KWorkerHandleaddr is modified, how is this accomplished?

Assuming the above two points hold, what is the role of NtRegisterThreadTerminatePort and NtAlpcSendWaitReceivePort? Our guess is that NtAlpcSendWaitReceivePort causes the modification of var_KWorkerHandleaddr.

What role does the extensive NtCreateEvent calls in fun_NtCreateEvent serve?

What is the purpose of the memory constructed at 7FF72DE66130 and the surrounding 7FF72DE671B0 in fun_setEvilmessage?

For the first question, let's directly look at the implementation of NtSetInformationWorkerFactory. We know the third parameter of this function is the value to be written. We look for where this parameter is assigned and find a reasonable place where the assignment occurs.

After setting a breakpoint and running, the target of the assignment rcx points to a TpWorkerFactory kernel object, whose address matches the var_KWorkerHandleaddr obtained at runtime during exploitation. We can see that the location var_KWorkerHandleaddr + 0x10 has already been modified to 0x10000000110.

The address 0x10000000110 is subsequently sprayed by the exploit as var_ioringRegBuffers.

After assignment, var_ioringRegBuffers is changed to ffff0000. Setting ffff0000 to zero later realizes atomic global read/write for I/O Ring. Thus, this confirms that NtSetInformationWorkerFactory enables writing pointers in the 0x100000000 - 0x1000002000 address range because the pointer at var_KWorkerHandleaddr + 0x10 is set to an address in that range. This explains why var_KWorkerHandleaddr needs to be sprayed into this address range.

For the second question, how is var_KWorkerHandleaddr modified? We set a memory write breakpoint on var_KWorkerHandleaddr + 0x10 in the exploit. Before modification, the address at offset 0x10 is not recognized by !object.

Upon further execution, the modification happens inside the kernel function KeSetEvent. Notably, this modification is not a one-time event but happens multiple times during the execution of KeSetEvent. Here are two key modifications:

First modification (shown)

Second modification (shown)

In IDA, KeSetEvent modifies the header inside the event object. The first modification is shown above.

The second modification confirms that the object at var_KWorkerHandleaddr + 0xd or var_KWorkerHandleaddr + 0x11 is passed into KeSetEvent as an event object. This results in the modification of the pointer at offset 0x10 within the var_KWorkerHandleaddr object.

Since the object at var_KWorkerHandleaddr is not constant, the pointer at 0x10 varies, resulting in a pointer range between 0x100000000 and 0x1000002000. This explains why the target write addresses must be sprayed within this range.

The call stack at the time of calling KeSetEvent shows that the origin is indeed NtAlpcSendWaitReceivePort. Hence, our earlier guess is confirmed: the vulnerability causes NtAlpcSendWaitReceivePort to modify the object at var_KWorkerHandleaddr, enabling pointer writes in the specified range by NtSetInformationWorkerFactory.

Complete Call Stack
[Call stack image or description is here in original]

What kind of vulnerability allows NtAlpcSendWaitReceivePort to modify the object at var_KWorkerHandleaddr?
From the above analysis, it can be basically confirmed that this is related to the two ALPC functions NtRegisterThreadTerminatePort and NtAlpcSendWaitReceivePort.

The simplest approach to analyze is reverse engineering and debugging from NtAlpcSendWaitReceivePort to KeSetEvent to understand how the var_KWorkerHandleaddr object is modified.

Before that, we need an overview of the ALPC mechanism in Windows.

ALPC
ALPC (Advanced Local Procedure Call) is a fast, powerful inter-process communication (IPC) mechanism widely used internally in Windows OS. The main component of ALPC communication is the ALPC port object. This kernel object is used similarly to network sockets, where a server opens a socket (connection port) that clients can connect to for message exchange.

The ALPC communication scenario involves three ALPC port objects:

The server-created ALPC connection port (connection port), which clients connect to (like a network socket).

Once the client connects, the kernel creates two new ports: the ALPC server communication port and the ALPC client communication port.

Once these ports are established, both parties can use NtAlpcSendWaitReceivePort (exported by ntdll.dll) to send messages to each other. The client initiates connection with NtAlpcConnectPort.

For client-side use, these two functions suffice:

NtAlpcConnectPort

NtAlpcSendWaitReceivePort

NtAlpcConnectPort connects to the ALPC server. Upon success, it returns a PortHandle, which corresponds to the ALPC client communication port kernel object.

After obtaining this handle, messages can be sent and received through NtAlpcSendWaitReceivePort.

Note: This function performs both send and receive operations. Messages sent from the client are routed by the kernel through message queues with validation and notification to the parties involved.

Below is the call stack leading to the modification of the object at var_KWorkerHandleaddr triggered by NtAlpcSendWaitReceivePort (red line separates phases). After sending, it calls back to the pdc ALPC port service handler pdc.sys, where actual processing happens.

We bypass NtAlpcSendWaitReceivePort internals and look directly into pdc.sys.

In pdc.sys, the core function processing ALPC is PdcpAlpcProcessMessages. Inside is a while loop that calls ZwAlpcSendWaitReceivePort (a wrapper around NtAlpcSendWaitReceivePort) to receive kernel messages.

As mentioned, sending and receiving in ALPC use NtAlpcSendWaitReceivePort, with communication routed through the kernel, and finally processed by PdcProcessMessage.

Its two parameters are ReceiveMessage and MessageAttribute.

From the previous call stack, the modification of the object at var_KWorkerHandleaddr occurs at the location pointed to by:
poi(poi(poi(poi(MessageAttribute) + 0x20) + 0x20) + 0x6c8)
This is derived from MessageAttribute, which equals poi(ReceiveMessageAttributes(v5) + 8).

Below we actually look at the entire incoming process, where the function PdcProcessMessage calls PdcProcessReceivedUserMessage.

PdcProcessReceivedUserMessage calls PdcpTaskClientReceive.

PdcpTaskClientReceive calls PdcpDereferenceTaskClient.

PdcpDereferenceTaskClient calls PdcpTaskClientAcknowledge.

PdcpTaskClientAcknowledge calls PdcSendKernelMessage.

PdcSendKernelMessage calls PdcPortQueueMessage.

PdcPortQueueMessage calls KeSetEvent, and finally the passed poi(poi(poi(poi(MessageAttribute)+0x20)+0x20)+0x6c8) will be modified.

Careful readers may notice a problematic point here, which is how MessageAttribute comes about. It should be known that in our exploit sample, when calling NtAlpcSendWaitReceivePort only the first three parameters are passed, and only SendMessage is set, while the corresponding SendMessageAttributes parameter is empty. Why is it that in PdcpAlpcProcessMessages we still receive the corresponding v5 ReceiveMessageAttributes and can extract MessageAttribute from it? How does MessageAttribute come from?

This question actually puzzled me for a long time at the beginning, but it is actually a misconception. Indeed, we did not set the corresponding SendMessageAttributes when sending, but since in ALPC the sender and receiver do not connect directly, the receiver actually connects to the kernel. The PDC receiver sets the corresponding ReceiveMessageAttributes in ZwAlpcSendWaitReceivePort, so this parameter will be generated by the kernel during routing.

Looking at the receiving branch code of NtAlpcSendWaitReceivePort, we can see that AlpcpExposeAttributes is called only after checking whether ReceiveMessageAttributes exist. Since the PDC ZwAlpcSendWaitReceivePort sets this parameter, the kernel will automatically set the corresponding ReceiveMessageAttributes when routing this message.

The call stack for this process is as follows:

Having clarified the origin of messageattribute, we now need to confirm how poi(poi(poi(poi(MessageAttribute)+0x20)+0x20)+0x6c8) is modified? From the above analysis, we can confirm that the issue is unlikely at NtAlpcSendWaitReceivePort. In this case, the only other function is NtRegisterThreadTerminatePort.

Testing shows that the exploit sample becomes ineffective after installing the August 2024 patch. To verify, we compared the Windows kernel files of July and August 2024 via bindiff, and found that in the new version the NtRegisterThreadTerminatePort function used by the exploit sample was removed!

As analyzed before, the function associates an ALPC port handler with the current thread. When the kernel calls NtTerminateThread, it sends an LPC_TERMINATION_MESSAGE to the corresponding port. Its calling logic is as follows:

Eventually it calls PspExitThread. PspExitThread handles the following: it checks the current thread and obtains the kernel object corresponding to the ALPC port previously bound via NtRegisterThreadTerminatePort. Then through the function LpcRequestPort, it sends a message to the corresponding ALPC server (in the exploit code this is the PDC ALPC port service). The message content starts with 300008006, which is the aforementioned LPC_TERMINATION_MESSAGE.

LpcRequestPort is shown below; the final sending is done via AlpcpSendMessage. Actually, LPC is a mechanism for internal process communication before Windows Vista. After Vista, it was replaced by a more efficient ALPC. For compatibility, all LPC calls are essentially redirected to ALPC.

Our ALPC port handler here is actually the ALPC port corresponding to the PDC ALPC port service, and the driver is pdc.sys.

Upon entering PdcProcessMessage, there is a branch for handling LPC_TERMINATION_MESSAGE. It checks the exact position 6 of the message starting at offset +4 in 300008006 we just sent. PdcFreeClient will be used to free poi(poi(MessageAttribute)+0x20), and the freed location should then be occupied by exp and overwritten with malicious memory. In that malicious memory poi(poi(evil+0x20)+0x6c8) points to a var_KWorkerHandleaddr, which is then passed into KeSetEvent as poi(poi(poi(poi(MessageAttribute)+0x20)+0x20)+0x6c8) and modified.

The following questions need to be confirmed:

Is the freeing caused by PdcFreeClient and then reused?

If question 1 is true, what is this freed memory, how is it generated, and why is it not modified between the LPC_TERMINATION_MESSAGE sent by the system and the triggered message we sent via NtAlpcSendWaitReceivePort?

How is the memory occupation implemented? Our guess is NtCreateEvent, as the spray operation in the code related to NtCreateEvent is very obvious.

When the bound thread exits, triggering LpcRequestPort, the kernel sends a LPC_TERMINATION_MESSAGE starting with 300008 to the corresponding PDC ALPC port service.

The PDC ALPC port service handles received messages in pdc.sys's PdcpAlpcProcessMessages function. As stated before, messages in ALPC are routed by the kernel. Here ZwAlpcSendWaitReceivePort is called to receive the message. Because ZwAlpcSendWaitReceivePort specifies ReceiveMessageAttributes (v5), the kernel generates this data during routing, even if the actual sender does not send it.

Before calling ZwAlpcSendWaitReceivePort in PdcpAlpcProcessMessages, an object of ReceiveMessageAttributes is created through AlpcInitializeMessageAttribute.

The ZwAlpcSendWaitReceivePort call actually goes into the kernel's NtAlpcSendWaitReceivePort, and then into AlpcpReceiveMessage, which calls AlpcpReceiveMessagePort.

As shown below, the core of AlpcpReceiveMessagePort lies in returning the _KALPC_MESSAGE corresponding to the received message.

Here, the server connection port object is as follows.

The overall structure of nt!_ALPC_PORT is as follows:
0: kd> dt nt\!\_ALPC\_PORT
   +0x000 PortListEntry    : _LIST_ENTRY
   +0x010 CommunicationInfo : Ptr64 _ALPC_COMMUNICATION_INFO
   +0x018 OwnerProcess     : Ptr64 _EPROCESS
   +0x020 CompletionPort   : Ptr64 _KQUEUE
   +0x028 CompletionKey    : Ptr64 Void
   +0x030 CompletionPacketLookaside : Ptr64 _ALPC_COMPLETION_PACKET_LOOKASIDE
   +0x038 PortContext      : Ptr64 Void
   +0x040 StaticSecurity   : _SECURITY_CLIENT_CONTEXT
   +0x088 IncomingQueueLock : _EX_PUSH_LOCK
   +0x090 MainQueue        : _LIST_ENTRY
   +0x0a0 LargeMessageQueue : _LIST_ENTRY
   +0x0b0 PendingQueueLock : _EX_PUSH_LOCK
   +0x0b8 PendingQueue     : _LIST_ENTRY
   +0x0c8 DirectQueueLock  : _EX_PUSH_LOCK
   +0x0d0 DirectQueue      : _LIST_ENTRY
   +0x0e0 WaitQueueLock    : _EX_PUSH_LOCK
   +0x0e8 WaitQueue        : _LIST_ENTRY
   +0x0f8 Semaphore        : Ptr64 _KSEMAPHORE
   +0x0f8 DummyEvent       : Ptr64 _KEVENT
   +0x100 PortAttributes   : _ALPC_PORT_ATTRIBUTES
   +0x148 ResourceListLock : _EX_PUSH_LOCK
   +0x150 ResourceListHead : _LIST_ENTRY
   +0x160 PortObjectLock   : _EX_PUSH_LOCK
   +0x168 CompletionList   : Ptr64 _ALPC_COMPLETION_LIST
   +0x170 CallbackObject   : Ptr64 _CALLBACK_OBJECT
   +0x178 CallbackContext  : Ptr64 Void
   +0x180 CanceledQueue    : _LIST_ENTRY
   +0x190 SequenceNo       : Int4B
   +0x194 ReferenceNo      : Int4B
   +0x198 ReferenceNoWait  : Ptr64 _PALPC_PORT_REFERENCE_WAIT_BLOCK
   +0x1a0 u1               : <unnamed-tag>
   +0x1a8 TargetQueuePort  : Ptr64 _ALPC_PORT
   +0x1b0 TargetSequencePort : Ptr64 _ALPC_PORT
   +0x1b8 CachedMessage    : Ptr64 _KALPC_MESSAGE
   +0x1c0 MainQueueLength  : Uint4B
   +0x1c4 LargeMessageQueueLength : Uint4B
   +0x1c8 PendingQueueLength : Uint4B
   +0x1cc DirectQueueLength : Uint4B
   +0x1d0 CanceledQueueLength : Uint4B
   +0x1d4 WaitQueueLength  : Uint4B
AlpcpReceiveMessagePort retrieves messages from the MainQueue message queue inside the _ALPC_PORT object.

The messages in the queue are nt!_KALPC_MESSAGE objects. As shown below, the extracted message object's +0xf0 offset corresponds exactly to the sent 3000008 message entity.

The _KALPC_MESSAGE structure is as follows: starting at 0x68 is MessageAttributes, and at 0xf0 is the corresponding message entity.

Then some settings are applied to this _KALPC_MESSAGE, and execution jumps to Label_19.

Finally, AlpcpReceiveMessagePort returns this _KALPC_MESSAGE through the a4 parameter.

The returned _KALPC_MESSAGE is shown below.

Since ZwAlpcSendWaitReceivePort in PdcpAlpcProcessMessages sets the ReceiveMessageAttributes parameter (which corresponds to this a4), the function AlpcpExposeAttributes is called.

The parameters for AlpcpExposeAttributes are shown below. Note that a2=0, a3 is the _KALPC_MESSAGE object returned previously by AlpcpReceiveMessagePort, a4=0x2000000, and a5 is ReceiveMessageAttributes.

After checks on a2 and a4, AlpcpExposeAttributes proceeds directly into the area marked by the red box in the diagram below.

Then it sets ReceiveMessageAttributes, whose data source is originally from the _KALPC_MESSAGE object.

As shown below, rcx points to ReceiveMessageAttributes+8.

The core of this assignment is at ReceiveMessageAttributes+8, where the value assigned is _KALPC_MESSAGE->MessageAttributes->PortContext.

PortContext is set into ReceiveMessageAttributes+8.

The completed ReceiveMessageAttributes+8 looks as follows.

The content set into ReceiveMessageAttributes is as follows:

After ZwAlpcSendWaitReceivePort returns in PdcpAlpcProcessMessages, the second argument MessageAttribute passed into the PdcProcessMessage function is ReceiveMessageAttributes+8, while the first argument is the 300008 message entity. As analyzed before, the value at offset +0x4 of this message entity (6) will trigger entry into PdcFreeClient.

Inside PdcFreeClient, poi(poi(poi(MessageAttribute)+0x20)+0x20) and poi(poi(MessageAttribute)+0x20) will be freed in that order.

As shown below, poi(poi(poi(MessageAttribute)+0x20)+0x20) actually points to poi(MessageAttribute). Therefore, the two frees actually correspond to poi(MessageAttribute) and poi(poi(MessageAttribute)+0x20).

First freed is poi(poi(MessageAttribute)+0x20), which is a pool of size 0x50.

Next freed is poi(MessageAttribute).

poi(MessageAttribute) is also of size 0x50.

After PdcFreeClient returns, both these locations are freed.

The call stack during the freeing caused by the 3000008 message is shown below.

Therefore, here we understand the core of the vulnerability: NtRegisterThreadTerminatePort binds the current var_alpcConnectionHandle to the current thread CreateThread1. When CreateThread1 exits, the kernel retrieves the ALPC port kernel object corresponding to var_alpcConnectionHandle through the thread object and sends an LPC_TERMINATION_MESSAGE message to the pdc ALPC port. In PdcpAlpcProcessMessages, while handling the LPC_TERMINATION_MESSAGE message, ZwAlpcSendWaitReceivePort is called to obtain the message. Since the ReceiveMessageAttributes parameter is passed into the function, the kernel generates the corresponding ReceiveMessageAttributes when routing the message. The location ReceiveMessageAttributes+8 is set to the KALPC_MESSAGE->MessageAttributes->PortContext of this message. After ZwAlpcSendWaitReceivePort returns, PdcProcessMessage processes the LPC_TERMINATION_MESSAGE message and finally calls PdcFreeClient to release the ReceiveMessageAttributes+8 pointing to KALPC_MESSAGE->MessageAttributes->PortContext. How is the released KALPC_MESSAGE->MessageAttributes->PortContext reused? The answer is by spraying with NtCreateEvent. Setting a breakpoint directly on the freed address shows that NtCreateEvent eventually calls ObpLookupObjectName and reuses the freed pool through ExAllocatePool.

The actual position is shown below, and during the subsequent memmove, the ObjectAttributes.ObjectName set during the NtCreateEvent call is copied to the freed address. At this time, the content of ObjectAttributes.ObjectName was initially set to point to the maliciously constructed evil message PortContext.

As shown below, it can be seen that poi(MessageAttribute)+0x20 writes the address of our evil message PortContext.

The call stack during reuse is as follows.

Inside fun_NtCreateEvent, there are two reuse occupation schemes. Besides NtCreateEvent, there is also NtQueryLicenseValue below it.

NtQueryLicenseValue similarly allocates a 0x40 pool through the first parameter passed in, which just occupies the freed PortContext memory. It then writes the content at 7FF72DE671B0 into this pool, where the 0x20 offset is exactly the evil message PortContext. However, in actual exploitation, this function is rarely used, and even if patched out in the exploit code, it does not affect the actual exploit result.

After NtCreateEvent reuses the freed PortContext, the exploit uses var_alpcConnectionHandle to call NtAlpcSendWaitReceivePort. The following shows the 30002d8 message sent by the exploit and routed by the kernel received during PdcProcessMessage call. Similarly, this message is received from the kernel through ZwAlpcSendWaitReceivePort. Because ReceiveMessageAttributes is set, the 30002d8 message also returns ReceiveMessageAttributes.

Since all are returned from the kernel connection port, although the KALPC_MESSAGE in Mainqueues differ, KALPC_MESSAGE->MessageAttributes->PortContext is consistent. PortContext was released after processing the previous 300008 message and reused by NtCreateEvent to write the constructed evil message PortContext.

It can be seen that PortContext+0x20 points to the evil message PortContext, and evilmessage+0x1798 stores the address var_KWorkerHandleaddr + 0xD.

The actual addressing follows poi(poi(poi(poi(MessageAttribute)+0x20)+0x20)+0x6c8), eventually locating the place storing var_KWorkerHandleaddr + 0xD.

This is precisely the evil message PortContext we constructed at the start.

It can be seen that the PortContext for the 30000008 message corresponds to 0xffffe30b16a0d850.

For the 30000d28 message, PortContext remains 0xffffe30b16a0d850, thus guaranteeing UAF reuse.

During 300002d8 message processing, the evil message PortContext is used to modify the pointer at var_KWorkerHandleaddr+0x10, which was analyzed earlier. The specific call stack is as follows, and the modification completes in KeSetEvent.

Each call only modifies four bytes, so two triggers are needed to modify the full 8-byte pointer. This is why var_countsForintoLoopWorkerFactory is set to ensure NtAlpcSendWaitReceivePort is called more than twice.

The first four-byte modification is of var_KWorkerHandleaddr+0xd, as set in evilmessage.

The second sending is of the 3000002d8 message.

The second modifies the four bytes starting at var_KWorkerHandleaddr+0x11. Through KeSetEvent, the pointer is finally controlled within the range 0x100000000-0x1000002000.

Finally, the target write address spray within the 0x100000000-0x1000002000 range is used to modify the i/o ring by calling functions, thus gaining arbitrary address read/write atomics.

Summary
The whole exploitation process is as follows:

Call NtAlpcConnectPort to connect to the pdc ALPC port service and obtain a var_alpcConnectionHandle.

In thread 1, call NtRegisterThreadTerminatePort to bind var_alpcConnectionHandle to the thread 1's _ETHREAD kernel object.

3.1 Monitor thread 1; when thread 1 exits, kernel PspExitThread is called, and the _ETHREAD kernel object bound to var_alpcConnectionHandle calls LpcRequestPort to send an LPC_TERMINATION_MESSAGE to the pdc port server.

3.2 The pdc server processes the message via PdcpAlpcProcessMessages. It receives kernel-routed ALPC messages through ZwAlpcSendWaitReceivePort, with ReceiveMessageAttributes set, leading ZwAlpcSendWaitReceivePort->NtAlpcSendWaitReceivePort->AlpcpReceiveMessage->AlpcpExposeAttributes to call AlpcpReceiveMessagePort, get the _KALPC_MESSAGE, and set ReceiveMessageAttributes. ReceiveMessageAttributes+8 is set to _KALPC_MESSAGE.MessageAttributes.PortContext, which is bound to the connection port. Thus, all received messages share the same fixed _KALPC_MESSAGE.MessageAttributes.PortContext pointer.

3.3 PdcProcessMessage handles the message and eventually releases ReceiveMessageAttributes+8 holding the _KALPC_MESSAGE.MessageAttributes.PortContext pointer in PdcFreeClient.

After releasing ReceiveMessageAttributes->_KALPC_MESSAGE.MessageAttributes.PortContext, repeatedly call NtCreateEvent, setting ObjectAttributes.ObjectName parameter to 7FF72DE671B0, where at offset +0x20 is stored evil message PortContext 7FF72DE66130. NtCreateEvent calls ObpLookupObjectName and occupies the freed ReceiveMessageAttributes->_KALPC_MESSAGE.MessageAttributes.PortContext memory via ExAllocatePool2, then copies 7FF72DE66130 from ObjectAttributes.ObjectName into the +0x20 offset of the reused memory, achieving reuse and modification.

5.1 In thread 2, after confirming NtCreateEvent occupies the memory and ReceiveMessageAttributes->_KALPC_MESSAGE.MessageAttributes.PortContext+0x20 points to evil message PortContext 7FF72DE66130, call NtAlpcSendWaitReceivePort with var_alpcConnectionHandle to send a 30002d8 message to the pdcport server.

5.2 Like processing the 3000008 LPC_TERMINATION_MESSAGE, ZwAlpcSendWaitReceivePort obtains ReceiveMessageAttributes from the kernel. ReceiveMessageAttributes+8 points to _KALPC_MESSAGE.MessageAttributes.PortContext, which is consistent across the connection port's _KALPC_MESSAGE. The offset 0x20 has been modified to evil message PortContext 7FF72DE66130 in step 4.

5.3 PdcProcessMessage handles the 30002d8 message, eventually causing poi(poi(poi(poi(poi(ReceiveMessageAttributes+8))+0x20)+0x20)+0x6c8) var_KWorkerHandleaddr + 0xd/0x11 to be set in KeSetEvent. After two NtAlpcSendWaitReceivePort calls (each modifying 4 bytes), the pointer at var_KWorkerHandleaddr+0x10 is modified to a value within 0x100000000-0x1000002000. We seize the memory freed by poi(poi(poi(poi(poi(ReceiveMessageAttributes+8))+0x20)+0x20)+0x6c8) (red pointer), replacing it with the blue pointer set to evil message PortContext.

6 The pointer at var_KWorkerHandleaddr+0x10 is modified to a value in 0x100000000-0x1000002000 range. By spraying target write addresses within this range and calling NtSetInformationWorkerFactory with var_KWorkerHandleaddr, an arbitrary write primitive is gained, ultimately enabling two privilege escalation methods by modifying the i/o ring / PreviousMode.