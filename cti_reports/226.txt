1.1 Background
References
Organization Introduction

The DarkHotel organization was disclosed by foreign security vendors in 2014 and is reportedly traceable back to 2010. It earned its name from targeting business executives and national dignitaries staying at luxury hotels. Its attack scope has included China, North Korea, Japan, Myanmar, India, and several European countries. The group is considered an APT (Advanced Persistent Threat) organization with ties to government entities on the Korean Peninsula. In recent years, their targets have gone far beyond the hotel industry implied by their name, expanding to foreign trade, government agencies, research institutions, and the defense industry. It has become one of the APT groups frequently attacking neighboring countries.

Incident Overview
Recently, the 404 Advanced Threat Intelligence Team of Knownsec identified new attack activity linked to the DarkHotel organization during a threat hunt. In these attacks, the group utilized system programs signed by Microsoft to side-load and execute malicious DLL files, eventually decrypting and loading malicious components. Compared to the InitPlugins framework used by the group in 2023, this attack demonstrates an upgraded version of the framework.

Key Findings
DarkHotel continues to demonstrate a high level of sophistication in its tactics and technologies. Despite the victim machines enabling proactive defenses and antivirus software, the attacks were carried out with ease, reflecting the group's advanced evasion capabilities.

The attackers possess in-depth knowledge of MFC-related loading mechanisms and demonstrate strong coding skills. Their code employs multiple layers of obfuscation and double injection techniques to increase analysis difficulty, conceal activity, and ensure stable operation of the injected code.

Functionally, the design uses modular loading, disguising encrypted module files as system files. To enhance the deception, they also modify the file timestamps of the disguised files to match that of system file kernel32.dll (which normally changes during OS installation or updates).

The attackers also used RPC (Remote Procedure Call) technology to execute component functions, separating communication components and functional components and maintaining persistence using different scheduled tasks.

1.2 Technical Analysis
References
Attack Flow
image-20250411145154520

Key Techniques
MFC Local Resource Loading Mechanism

In MFC, there exists a localized resource loading mechanism whereby an MFC-compiled EXE or DLL (e.g., MFCxx.exe) does not directly load its own resources. Instead, it searches for resource DLLs in the following order:

The current user’s default UI language returned by the GetUserDefaultUILanguage() Win32 API. For example, if the language is FRC (Canadian French), it loads MFCxxFRC.dll.

image-20250410135119646

If the user’s default UI language lacks a specific sublanguage, it loads MFCxxFRA.dll.

The system’s default UI language returned by GetSystemDefaultUILanguage(). For example, if the system language is ENC (Canadian English), it loads MFCxxENC.dll.

If the system default UI language lacks a specific sublanguage, it loads MFCxxENU.dll.

A pseudo-language using a three-letter LOC code, resulting in the loading of MFCxxLOC.dll.

image-20250410135138846

The directory structure of the scheduled task main program is shown below. The attacker drops LOC.dll into the same directory as the main program, leading to its loading and execution:

image-20250410140425126

Code Obfuscation

The attacker uses various types of obfuscated code, significantly inflating code size and increasing the difficulty of analysis. An example of such obfuscation is:

img

Double Injection

First Injection: The malware searches for specific system processes and injects process-creation-related code to obtain higher privileges and prevent injection failure:

img

Second Injection: The malicious payload is injected into the system process spawned by the first injection:

img

System File Masquerading

The attackers include a list of encrypted files to be decrypted. Judging by the file paths and names, it is clear they intended to disguise these as system key files. To enhance credibility, they read the file timestamp of the host machine’s kernel32.dll and align all .pem file timestamps in the list to match it.

image-20250410140554012

Local RPC Invocation Mechanism

Functional component registers RPC interface:

image-20250411103553450

Core loader component invokes the interface:

image-20250411103915253

Component Analysis
Core Loader Component

The core loader is capable of loading components using multiple methods, based on a type value set by the attacker:

Type 1: Create thread to execute shellcode
image-20250411105420360

Type 2: Reflective loading
image-20250411105731119

Type 3: Injection execution
image-20250411110549996

Type 4: LoadLibraryW loading
image-20250411110748871

The first three methods use the same algorithm and key for decryption:
image-20250411111006586

Functional Components

Four components were captured and categorized into two types, as detailed in the following table:

image-20250411143503041

Attribution

Algorithm Correlation

In previously exposed DarkHotel attacks, the group repeatedly used XOR algorithms for encryption and decryption. For instance, in the InitPlugins-based attacks in 2023:

image-20250411142210095

Architecture Correlation

The framework used in this attack matches the InitPlugins architecture from 2023 in its use of reading a built-in file list and decrypting components for loading:

image-20250411143814970

Component Correlation

The components loaded in this attack closely resemble those used in the 2023 InitPlugins campaign:

image-20250411125528231

Based on the above correlations, we are confident that the samples captured in this campaign are attributable to the DarkHotel group. Compared to previous attacks, this time DarkHotel separated the remote control component (Meterpreter) from functional components (keylogging, screen capture, USB data theft), likely to prevent the failure of the entire attack chain if one component is detected. This shows the group’s continued effort to enhance tool robustness and increase the success rate of their attacks.

3. Indicators of Compromise (IOC)

References
e14459863ac38df87e59e0a93a0fa438
d61308ddf2624e726fe83cd487dd6fe3
c92afb4d4fc5effd49cbc048d4355d1c
7cff54d8227393c352ee0859bc5cf01e