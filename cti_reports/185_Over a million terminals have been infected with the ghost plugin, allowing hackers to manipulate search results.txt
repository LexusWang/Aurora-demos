Background
During endpoint-side operations, the Threat Intelligence Center of QiAnXin discovered a large-scale overseas hacker group capable of hijacking victims' Google search content and e-commerce links. Based on PDNS data, the group has been active since 2021, and its malicious domains appear in the OPENDNS top 1m list, affecting at least millions of endpoints worldwide.

URL	Active Time
overbridgenet.com/jsv2/offer_combo_v6	2021-05-10 to 2023-04-15
overbridgenet.com/jsv8/offer	2023-05-24 to present
These related domains also have a high volume of visits within China:

We found a malicious browser plugin and named it the "Ghost Plugin."

The attacker bypassed Google’s CSP mechanism. When using Google Search, a JavaScript was injected into the page. Screenshot before injection:

Screenshot after injection:

The Google search page loaded additional JavaScript and displayed results pushed by the attacker at the top. In addition to manipulating search results, the victim’s browser also injects another script when accessing any page to track browsing habits and activity. When the victim visits an e-commerce site, the malicious JS fetches a new domain from overbridgenet.com/jsv8/offer to hijack the redirection links on the current page.

The domain overbridgenet.com resolves to IP address 5.223.52.27, which hosts multiple suspicious domains, all with high traffic.

Based on VT (VirusTotal) data, a large number of URLs can be seen. The URL fields are consistent with the above concatenated fields, only with a different order. This indicates that these URLs are hijacked links constructed by the malicious JS. Some of the hijacked URLs appear to be web login pages.

Currently, the hijacked links only perform redirections. The hijacking logic is controlled remotely by the attacker in the cloud, and theoretically, they can customize the hijack to target specific websites or even perform man-in-the-middle attacks to steal login credentials from login pages.
Impact Scope
Based on PDNS data, we conducted statistics on domestic victims affected by the malicious plugin:

When Google search results are hijacked, the traffic is directed to svdred.com and xerogala.com. Therefore, the actual number of successful hijackings in China can be estimated through this data:

Technical Details
Given the large scale of victims, the attack may involve multiple infection vectors. Based on endpoint data, we observed that the malicious plugin was embedded in cracked software installers, as shown below:

The attackers uploaded such forged installers to some cracked software download sites, waiting for victims to download them. Once clicked, the installer releases a series of malicious components to the C:\Users\Public\data directory.

Some components are initially extracted to the C:\Windows\System32 folder.

Then, the transition of these components from Windows\System32 to Users\Public\data is handled by mdwslp.

After extraction, the following command is executed to register the mdwslp component as a service and start it:

sc create XblGame binPath="C:\Users\Public\data\mdwslp.exe" start= auto

mdwslp.exe
This component is responsible for initializing the entire malicious web plugin. It first checks for the existence of certain components to determine whether initialization has already been completed.

It extracts Windows\System32\data1.zip to Public\data\ext.

This part contains the JavaScript code for the malicious web plugin.

It then enters a loop to check for the presence of Public\data\uptimecrx.exe. If not found, it copies the file from Windows\System32\uptimecrx.dat.

After copying, it uses Microsoft’s official signing tool signtool.exe to sign the file.

The signature is created by the attacker.

Finally, it registers uptimecrx.exe as another service XblGame2 and starts it.

The signature of uptimecrx.exe is updated every 10 hours.

It checks for the presence of the flag file Public\data\up1.dat. If present, it indicates an update is needed, and the loop exits. This component’s update is handled by uptimecrx.exe.

In addition, this component continuously checks whether the malicious DLL has been injected into target processes.

If not detected, it calls an injection tool to perform the injection.

The injection tool is the previously released Windows\System32\datax.dat. When called, it is copied to AppData\Local\Temp\xtdbf with a randomly generated filename.

Then, it is launched with parameters like --install / --uploaddll.

uptimecrx.exe
This component is responsible for updating and persisting mdwslp.exe. It continuously checks whether mdwslp.exe exists. If not, it copies the file from Windows\System32\mi_nt_svc.dat, re-registers the service, and starts it.

It checks whether the service XblGame registered by mdwslp.exe has stopped. If so, it restarts it.

It also uses the flag file Public\data\up1.dat to check whether mdwslp.exe needs an update. If needed, it copies the update again from Windows\System32\mi_nt_svc.dat, re-signs it, and re-registers and starts the service.

datax.dat
This component is a DLL injection tool. Its primary function is to inject the malicious ntdb.dll into target processes.

Depending on the parameter used, the injection targets are as follows:

--install: Inject into the explorer process

--browser_chrome: Inject into the chrome process

--browser_msedge: Inject into the msedge process

--uploaddll: Obtain a new payload DLL from Windows\System32\ntdb.dat and re-sign it

ntdb.dll
This component is responsible for loading the malicious web plugin. It first checks whether it is running within the explorer.exe, chrome.exe, or msedge.exe processes. If not, it exits.

If running in chrome.exe or msedge.exe, it hooks the ChromeMain function within relevant DLLs.

It also hooks relevant event functions.

If running in the explorer.exe process, it launches the browser with parameters like --load-extension, used to load the malicious web plugin.

The plugin path is specified as Users\Public\data\ext.

Once launched, it injects itself into the browser process.

Ext (Browser Extension)
If a malicious plugin loads successfully, the browser extension bar will display a blank page.

Details are as follows:

manifest.json
Defines the scope of related JS files; service_worker.js is the background service worker:

content_script.js will be loaded when the URL matches search engine related sites:

disabled-trusted-types.js is loaded at all times.

Some miscellaneous items are then defined, including version info, update links, etc.

content_script.js
Gets the current UUID, passes it to web_accessible_resource.js, and loads it.

web_accessible_resource.js
Performs a simple URL check first; if successful, it requests JS from calnor.info and injects it into the current page.

According to the rules in manifest.json, this JS loads when accessing Google Search; the JS returned by calnor.info can be seen in the page source.

disabled-trusted-types.js
Disables the browser’s XSS protection policies.

service_worker.js
This JS acts as the background service worker, running when the extension is activated. It first registers an install event listener that executes when the extension is installed for the first time.

It first obtains a UUID from klymos.info: trackInstall.

Registers a client ID and sends a message of this event to dash.zintrack.com via sendApiRequest. This domain is a lightweight alternative to Google Analytics; the attacker registered their own API key for victim statistics.

Sets dash.zintrack.com as the domain to receive messages when the extension is uninstalled via setUninstallURL. Then sets a timer to periodically update rules.

The rules are still fetched from klymos.info and applied to intercept the extension’s network requests.

The fetched rules remove security policies like content-security-policy and X-Xss-Protection from some search sites’ network requests.

Registers a timer update-rc to fetch remote code.

fetchRemoteCode is used to get JS code from infird.com.

Registers tab update events; whenever the user creates a new browser tab, the fetched remote JS is loaded into the current page, unless the page URL is in the blacklist.

When the user visits any page not on the blacklist, the JS is injected into the page source.

Finally, a page_view event is generated to indicate the victim has loaded service_worker.js.

This information is sent to Google Analytics at www.google-analytics.com, where the attacker registered their own API, likely to track victims.

remote code.js
This JS file is fetched from infird.com and loaded when the user opens a new webpage (new tab). Its malicious logic is controlled by several time-limited cookies set by the attacker.

It strictly filters the current page URL, stopping execution on most porn sites, social media, search engines, etc.

If the URL contains certain fields, execution also stops, showing the attacker avoids high-traffic scenarios, likely to hide themselves.

If passing the filter, a timer is set to execute every 20,000 ms.

During initialization, it checks whether certain cookies exist; if so, execution stops and the timer clears.

Lda_aKUr6BGRn is a URL used by the attacker for redirection. If empty, it fetches a new URL from overbridgenet.com to fill in.

overbridgenet.com returns a JSON file where the at field fills Lda_aKUr6BGRn. During actual debugging, this page returns only {"s":1,"n":1} format JSON; the attacker may selectively populate the at field at certain times to attack.

If n = 1, the perf_dv6Tr4n cookie is created and set to 1. The c field in the JSON is the cookie expiration time, controlling whether the JS continues executing (if perf_dv6Tr4n = 1 during initialization, it returns immediately).

Because the JSON does not contain a c field during actual debugging, this cookie does not expire.

If the Lda_aKUr6BGRn field is populated, the process proceeds to the next stage of filtering:

The current URL is a specified e-commerce website, and Ac_aqK8DtrDL is empty.

Executes link replacement operations.

First, it creates a click event listener; when the user clicks an element with a specified tag on the page, it hijacks the user’s navigation and redirects them to a link designated by the attacker.

The new link is constructed by concatenating Lda_aKUr6BGRn and may be used by the attacker for phishing.

The current URL is not an e-commerce site, Lda_aKUr6BGRn is not empty, and Ac_aqK8DtrDL is empty.

Hijacks the entire page to the attacker’s link, sets Ac_aqK8DtrDL to 1, and uses Ac_aqK8DtrDS for counting.

Ac_aqK8DtrDL is not empty and Fm_kZf8ZQvmX is empty.

Creates a new iframe, sets its src to the attacker’s link, styles it, and inserts it into the current page content, then sets Fm_kZf8ZQvmX to 1.

calnor.js
This JS is fetched from calnor.info and is used by the attacker to intercept web pages matching related manifest.json rules and inject content.

It mainly targets search engines such as Google. The attacker can replace the user’s search page content. First, it checks if the current page contains an attacker-set tag mdorkirgneorpowtn.

If present, it sends the tag data to svdred.com; if absent, it sends “global.”

Similarly, it detects if the page contains other specific elements and sends corresponding data to svdred.com. These elements do not exist on normal Google search pages but are set by the attacker to avoid repeated execution.

For this JS, after execution, it inserts the element mdorkirgneorpowtn into the current page.

Detection of any of these elements causes the script to terminate execution to prevent interference among components.

After passing detection, it first sets mdorkirgneorpowtn’s value to a=4001&u=0106-20250304-ORG.

The attacker avoids executing this component in some search modes, such as image or shopping searches, distinguishing only by search content, then sends different types of information to xerogala.com and terminates execution.

Next, it adds a meta element named referrer to the page’s head section.

Then it enters the replacement logic: first retrieving the search content, creating a new style element, and setting styles.

It constructs a URL request based on the search content, sends it to xerogala.com, and receives returned data.

It processes the returned data and fills it into the element sadsfs, which is inserted into the current page.

Its function is to insert attacker-replaced search results at the top of the search page. The following effect shows a victim’s search, where the first few search results are replaced.

Normal users’ search results do not include these initial contents.

Debugging the page reveals that the attacker-inserted content is precisely the sadsfs element, which mostly contains advertising content.

Summary
Currently, all products based on Qi An Xin Threat Intelligence Center’s threat intelligence data, including Qi An Xin Threat Intelligence Platform (TIP), Tianqing, Tianyan Advanced Threat Detection System, Qi An Xin NGSOC, Qi An Xin Situational Awareness, etc., have already supported precise detection for this type of attack.




