  - emulation_plan_details:
      adversary_name: test
      creation_time: 2024-11-11 02:17:35 UTC+0000
  - uuid: 81c13829-f6c9-45b8-85a6-053366d55297
    name: Malicious User Agents - Powershell
    id: T1071.001
    source: ART
    supported_platforms:
      - windows
    tactics:
      - Command and Control
    technique: 'Application Layer Protocol: Web Protocols'
    description: |
      This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. 
      Use an application such as Wireshark to record the session and observe user agent strings and responses.

      Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
    executor:
      command: |
        Invoke-WebRequest #{domain} -UserAgent "HttpBrowser/1.0" | out-null
        Invoke-WebRequest #{domain} -UserAgent "Wget/1.9+cvs-stable (Red Hat modified)" | out-null
        Invoke-WebRequest #{domain} -UserAgent "Opera/8.81 (Windows NT 6.0; U; en)" | out-null
        Invoke-WebRequest #{domain} -UserAgent "*<|>*" | out-null
      name: powershell
    arguments:
      domain:
        description: Default domain to simulate against
        type: string
        default: www.google.com
    dependencies: []
  - uuid: d03bfcd3-ed87-49c8-8880-44bb772dea4b
    name: ExecIntoContainer
    id: T1609
    source: ART
    supported_platforms:
      - containers
    tactics:
      - Execution
    technique: Container Administration Command
    description: |
      Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“kubectl exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “kubectl exec”.
    executor:
      command: |
        kubectl create -f #{path} -n #{namespace}
        # wait 3 seconds for the instance to come up
        sleep 3
        kubectl exec -n #{namespace} busybox -- #{command}
      cleanup_command: |
        kubectl delete pod busybox -n #{namespace}
      name: bash
      elevation_required: false
    arguments:
      namespace:
        description: K8s namespace to use
        type: string
        default: default
      command:
        description: Command to run
        type: string
        default: uname
      path:
        description: Path to busybox.yaml file
        type: string
        default: $PathtoAtomicsFolder/T1609/src/busybox.yaml
    dependencies:
      - description: |
          kubectl must be installed
        get_prereq_command: |
          echo "kubectl must be installed manually"
        prereq_command: |
          which kubectl
  - uuid: 8cd1947b-4a54-41fb-b5ea-07d0ace04f81
    name: New script file in the tmp directory
    id: T1059.004
    source: ART
    supported_platforms:
      - linux
    tactics:
      - Execution
    technique: 'Command and Scripting Interpreter: Unix Shell'
    description: |
      An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.
    executor:
      name: sh
      elevation_required: false
      command: |
        TMPFILE=$(mktemp)
        echo "id" > $TMPFILE
        bash $TMPFILE
      cleanup_command: |
        rm $TMPFILE
        unset TMPFILE
    arguments: []
    dependencies: []
  - uuid: 35eb8d16-9820-4423-a2a1-90c4f5edd9ca
    name: Masquerade as a built-in system executable
    id: T1036.005
    source: ART
    supported_platforms:
      - windows
    tactics:
      - Defense Evasion
    technique: 'Masquerading: Match Legitimate Name or Location'
    description: |
      Launch an executable that attempts to masquerade as a legitimate executable.
    executor:
      command: |
        Add-Type -TypeDefinition @'
        public class Test {
            public static void Main(string[] args) {
                System.Console.WriteLine("tweet, tweet");
            }
        }
        '@ -OutputAssembly "#{executable_filepath}"

        Start-Process -FilePath "#{executable_filepath}"
      cleanup_command: |
        Remove-Item -Path "#{executable_filepath}" -ErrorAction Ignore
      name: powershell
    arguments:
      executable_filepath:
        description: File path where the generated executable will be dropped and
          executed from. The filename should be the name of a built-in system utility.
        type: string
        default: $Env:windir\Temp\svchost.exe
    dependencies: []
