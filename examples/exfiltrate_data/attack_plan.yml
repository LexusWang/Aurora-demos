  - emulation_plan_details:
      adversary_name: test
      creation_time: 2024-11-11 02:17:35 UTC+0000
  - uuid: 2d7c471a-e887-4b78-b0dc-b0df1f2e0658
    name: Malicious User Agents - Nix
    id: T1071.001
    source: ART
    supported_platforms:
      - linux
      - macos
    tactics:
      - Command and Control
    technique: 'Application Layer Protocol: Web Protocols'
    description: |
      This test simulates an infected host beaconing to command and control.
      Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
    executor:
      command: |
        curl -s -A "HttpBrowser/1.0" -m3 #{domain}
        curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain}
        curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain}
        curl -s -A "*<|>*" -m3 #{domain}
      name: sh
    arguments:
      domain:
        description: Default domain to simulate against
        type: string
        default: www.google.com
    dependencies: []
  - uuid: a538de64-1c74-46ed-aa60-b995ed302598
    name: PowerShell Command Execution
    id: T1059.001
    source: ART
    supported_platforms:
      - windows
    tactics:
      - Execution
    technique: 'Command and Scripting Interpreter: PowerShell'
    description: |
      Use of obfuscated PowerShell to execute an arbitrary command; outputs "Hello, from PowerShell!". Example is from the 2021 Threat Detection Report by Red Canary.
    executor:
      command: |
        powershell.exe -e  #{obfuscated_code}
      name: command_prompt
    arguments:
      obfuscated_code:
        description: 'Defaults to: Invoke-Expression with a "Write-Host" line.'
        type: string
        default: 
          JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==
    dependencies: []
  - uuid: 7f843046-abf2-443f-b880-07a83cf968ec
    name: ESXi - Install a custom VIB on an ESXi host
    id: T1129
    source: ART
    supported_platforms:
      - windows
    tactics:
      - Execution
    technique: Shared Modules
    description: |
      An adversary can maintain persistence within an ESXi host by installing malicious vSphere Installation Bundles (VIBs).
      [Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-malware-persistence)
    executor:
      command: |
        #{pscp_file} -pw #{vm_pass} #{vib_file} #{vm_user}@#{vm_host}:/tmp
        echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{vib_install}"
      cleanup_command: |
        echo "" | "#{plink_file}" "#{vm_host}" -ssh  -l "#{vm_user}" -pw "#{vm_pass}" -m "#{vib_remove}"
      name: command_prompt
      elevation_required: false
    arguments:
      vm_host:
        description: Specify the host name of the ESXi Server
        type: string
        default: atomic.local
      vm_user:
        description: Specify the privilege user account on ESXi Server
        type: string
        default: root
      vm_pass:
        description: Specify the privilege user password on ESXi Server
        type: string
        default: pass
      plink_file:
        description: Path to plink
        type: path
        default: PathToAtomicsFolder\..\ExternalPayloads\plink.exe
      pscp_file:
        description: Path to Pscp
        type: path
        default: PathToAtomicsFolder\..\ExternalPayloads\pscp.exe
      vib_install:
        description: Path to script with commands to install the vib
        type: path
        default: PathToAtomicsFolder\..\atomics\T1129\src\esxi_vibinstall.txt
      vib_remove:
        description: Path to script with commands to remove the vib
        type: path
        default: PathToAtomicsFolder\..\atomics\T1129\src\esxi_vibremove.txt
      vib_file:
        description: Path to the dummy vib
        type: path
        default: PathToAtomicsFolder\..\atomics\T1129\src\atomicvibes.vib
    dependencies:
      - description: |
          Check if plink and pscp are available.
        prereq_command: |
          if (Test-Path "#{plink_file}") {exit 0} else {exit 1}
          if (Test-Path "#{pscp_file}") {exit 0} else {exit 1}
        get_prereq_command: |
          New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction Ignore -Force | Out-Null
          Invoke-WebRequest "https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe" -OutFile "PathToAtomicsFolder\..\ExternalPayloads\plink.exe"
          Invoke-WebRequest "https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe" -OutFile "PathToAtomicsFolder\..\ExternalPayloads\pscp.exe"
  - uuid: 54782d65-12f0-47a5-b4c1-b70ee23de6df
    name: Lolbas replace.exe use to copy file
    id: T1105
    source: ART
    supported_platforms:
      - windows
    tactics:
      - Command and Control
    technique: Ingress Tool Transfer
    description: |
      Copy file.cab to destination
      Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
    executor:
      command: |
        del %TEMP%\redcanary.cab >nul 2>&1
        #{Path_replace} "#{replace_cab}" %TEMP% /A
      cleanup_command: |
        del %TEMP%\redcanary.cab >nul 2>&1
      name: command_prompt
    arguments:
      replace_cab:
        description: Path to the cab file
        type: path
        default: PathToAtomicsFolder\T1105\src\redcanary.cab
      Path_replace:
        description: Path to replace.exe
        type: path
        default: C:\Windows\System32\replace.exe
    dependencies:
      - description: |
          #{replace_cab} must exist on system.
        prereq_command: |
          if (Test-Path "#{replace_cab}") {exit 0} else {exit 1}
        get_prereq_command: |
          New-Item -Type Directory (split-path "#{replace_cab}") -ErrorAction ignore | Out-Null
          Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/redcanary.cab" -OutFile "#{replace_cab}"
